from dataloader import CSV_READER
from models import ANN
import torch
import torch.nn as nn
import torch.utils.data as data
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import label_binarize

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

num_epochs, num_classes, batch_size, learning_rate, w_decay = 100, 9, 50, 0.001, 0.001

train_path = 'data/train.csv'
test_path = 'data/test.csv'

train_data = CSV_READER(train_path)
test_data = CSV_READER(test_path)
test_size = len(test_data)

train_data_loader = data.DataLoader(
    train_data, batch_size=batch_size, shuffle=True)
test_data_loader = data.DataLoader(
    test_data, batch_size=test_size, shuffle=True)

model = ANN().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(
    model.parameters(), lr=learning_rate, weight_decay=w_decay)

for epoch in range(num_epochs):

    for i, (images, labels) in enumerate(train_data_loader):
        images = images.to(device)
        labels = labels.to(device)
        outputs = model(images)

        _, predicted = torch.max(outputs[:, 0].data, 1)
        loss = criterion(outputs[:, 0], labels)
        x = np.array((predicted == labels).cpu())
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

for y, (images, labels) in enumerate(test_data_loader):
    images = images.to(device)
    labels = labels.to(device)
    outputs = model(images)

    _, predicted = torch.max(outputs[:, 0].data, 1)
    test_loss = criterion(outputs[:, 0], labels)
    test_x = np.array((predicted == labels).cpu())

    print("Test_loss="+str(test_loss.item()) +
          " Test_acc="+str((sum(test_x))*100/len(test_x)))

test_labels_bin = label_binarize(
    labels.cpu(), classes=[0, 1, 2, 3, 4, 5, 6, 7, 8])

cm = confusion_matrix(labels.cpu(), predicted.cpu())

fig, ax = plt.subplots(figsize=(7.5, 7.5))
ax.matshow(cm, cmap=plt.cm.PuBu, alpha=0.3)  # cmap=plt.cm.Blues,

for i in range(cm.shape[0]):
    for j in range(cm.shape[1]):
        ax.text(x=j, y=i, s=cm[i, j], va='center',
                ha='center', size='xx-large')

plt.xlabel('Predictions', fontsize=18)
plt.ylabel('Actuals', fontsize=18)
plt.title('Confusion Matrix', fontsize=18)
plt.show()
